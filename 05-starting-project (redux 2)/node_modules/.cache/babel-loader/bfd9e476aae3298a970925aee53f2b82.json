{"ast":null,"code":"import { createSlice, configureStore } from \"@reduxjs/toolkit\";\nconst cartSlice = createSlice({\n  name: \"cart\",\n  initialState: {\n    isActive: false,\n    notification: null\n  },\n  reducers: {\n    toggleCart(state) {\n      state.isActive = !state.isActive;\n    },\n\n    showNotification(state, action) {\n      state.notification = {\n        status: action.payload.status,\n        title: action.payload.title,\n        message: action.payload.message\n      };\n    }\n\n  }\n});\nconst productSlice = createSlice({\n  name: \"product\",\n  initialState: {\n    items: [],\n    quantity: 0,\n    totalPrice: 0,\n    changed: false\n  },\n  reducers: {\n    replaceCart(state, action) {\n      state.quantity = action.payload.quantity;\n      state.items = action.payload.items;\n    },\n\n    addItem(state, action) {\n      const newItem = action.payload;\n      const existingItem = state.items.find(item => item.id === newItem.id);\n      state.quantity++;\n      state.changed = true;\n\n      if (!existingItem) {\n        state.items.push({\n          id: newItem.id,\n          price: newItem.price,\n          quantity: 1,\n          totalPrice: newItem.price,\n          name: newItem.title\n        });\n      } else {\n        existingItem.quantity++;\n        existingItem.totalPrice = existingItem.totalPrice + newItem.price;\n      }\n    },\n\n    removeItem(state, action) {\n      const id = action.payload;\n      const existingItem = state.items.find(item => item.id === id);\n      state.quantity--;\n\n      if (existingItem.quantity === 1) {\n        state.items = state.items.filter(item => item.id !== id);\n      } else {\n        existingItem.quantity--;\n        existingItem.totalPrice = existingItem.totalPrice - existingItem.price;\n      }\n    }\n\n  }\n});\nconst store = configureStore({\n  reducer: {\n    cart: cartSlice.reducer,\n    product: productSlice.reducer\n  }\n});\nexport const showCart = cartSlice.actions;\nexport const modifyProduct = productSlice.actions;\nexport default store;","map":{"version":3,"sources":["C:/Users/bobso/Desktop/React Projects/05-starting-project (redux 2)/src/store/index.js"],"names":["createSlice","configureStore","cartSlice","name","initialState","isActive","notification","reducers","toggleCart","state","showNotification","action","status","payload","title","message","productSlice","items","quantity","totalPrice","changed","replaceCart","addItem","newItem","existingItem","find","item","id","push","price","removeItem","filter","store","reducer","cart","product","showCart","actions","modifyProduct"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,cAAtB,QAA4C,kBAA5C;AAEA,MAAMC,SAAS,GAAGF,WAAW,CAAC;AAC7BG,EAAAA,IAAI,EAAE,MADuB;AAE7BC,EAAAA,YAAY,EAAE;AAAEC,IAAAA,QAAQ,EAAE,KAAZ;AAAmBC,IAAAA,YAAY,EAAE;AAAjC,GAFe;AAG7BC,EAAAA,QAAQ,EAAE;AACTC,IAAAA,UAAU,CAACC,KAAD,EAAQ;AACjBA,MAAAA,KAAK,CAACJ,QAAN,GAAiB,CAACI,KAAK,CAACJ,QAAxB;AACA,KAHQ;;AAITK,IAAAA,gBAAgB,CAACD,KAAD,EAAQE,MAAR,EAAgB;AAC/BF,MAAAA,KAAK,CAACH,YAAN,GAAqB;AACpBM,QAAAA,MAAM,EAAED,MAAM,CAACE,OAAP,CAAeD,MADH;AAEpBE,QAAAA,KAAK,EAAEH,MAAM,CAACE,OAAP,CAAeC,KAFF;AAGpBC,QAAAA,OAAO,EAAEJ,MAAM,CAACE,OAAP,CAAeE;AAHJ,OAArB;AAKA;;AAVQ;AAHmB,CAAD,CAA7B;AAiBA,MAAMC,YAAY,GAAGhB,WAAW,CAAC;AAChCG,EAAAA,IAAI,EAAE,SAD0B;AAEhCC,EAAAA,YAAY,EAAE;AACba,IAAAA,KAAK,EAAE,EADM;AAEbC,IAAAA,QAAQ,EAAE,CAFG;AAGbC,IAAAA,UAAU,EAAE,CAHC;AAIbC,IAAAA,OAAO,EAAE;AAJI,GAFkB;AAQhCb,EAAAA,QAAQ,EAAE;AACTc,IAAAA,WAAW,CAACZ,KAAD,EAAQE,MAAR,EAAgB;AAC1BF,MAAAA,KAAK,CAACS,QAAN,GAAiBP,MAAM,CAACE,OAAP,CAAeK,QAAhC;AACAT,MAAAA,KAAK,CAACQ,KAAN,GAAcN,MAAM,CAACE,OAAP,CAAeI,KAA7B;AACA,KAJQ;;AAMTK,IAAAA,OAAO,CAACb,KAAD,EAAQE,MAAR,EAAgB;AACtB,YAAMY,OAAO,GAAGZ,MAAM,CAACE,OAAvB;AACA,YAAMW,YAAY,GAAGf,KAAK,CAACQ,KAAN,CAAYQ,IAAZ,CAAkBC,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYJ,OAAO,CAACI,EAA/C,CAArB;AACAlB,MAAAA,KAAK,CAACS,QAAN;AACAT,MAAAA,KAAK,CAACW,OAAN,GAAgB,IAAhB;;AACA,UAAI,CAACI,YAAL,EAAmB;AAClBf,QAAAA,KAAK,CAACQ,KAAN,CAAYW,IAAZ,CAAiB;AAChBD,UAAAA,EAAE,EAAEJ,OAAO,CAACI,EADI;AAEhBE,UAAAA,KAAK,EAAEN,OAAO,CAACM,KAFC;AAGhBX,UAAAA,QAAQ,EAAE,CAHM;AAIhBC,UAAAA,UAAU,EAAEI,OAAO,CAACM,KAJJ;AAKhB1B,UAAAA,IAAI,EAAEoB,OAAO,CAACT;AALE,SAAjB;AAOA,OARD,MAQO;AACNU,QAAAA,YAAY,CAACN,QAAb;AACAM,QAAAA,YAAY,CAACL,UAAb,GAA0BK,YAAY,CAACL,UAAb,GAA0BI,OAAO,CAACM,KAA5D;AACA;AACD,KAvBQ;;AAyBTC,IAAAA,UAAU,CAACrB,KAAD,EAAQE,MAAR,EAAgB;AACzB,YAAMgB,EAAE,GAAGhB,MAAM,CAACE,OAAlB;AACA,YAAMW,YAAY,GAAGf,KAAK,CAACQ,KAAN,CAAYQ,IAAZ,CAAkBC,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYA,EAAvC,CAArB;AACAlB,MAAAA,KAAK,CAACS,QAAN;;AACA,UAAIM,YAAY,CAACN,QAAb,KAA0B,CAA9B,EAAiC;AAChCT,QAAAA,KAAK,CAACQ,KAAN,GAAcR,KAAK,CAACQ,KAAN,CAAYc,MAAZ,CAAoBL,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYA,EAAzC,CAAd;AACA,OAFD,MAEO;AACNH,QAAAA,YAAY,CAACN,QAAb;AACAM,QAAAA,YAAY,CAACL,UAAb,GAA0BK,YAAY,CAACL,UAAb,GAA0BK,YAAY,CAACK,KAAjE;AACA;AACD;;AAnCQ;AARsB,CAAD,CAAhC;AA+CA,MAAMG,KAAK,GAAG/B,cAAc,CAAC;AAC5BgC,EAAAA,OAAO,EAAE;AAAEC,IAAAA,IAAI,EAAEhC,SAAS,CAAC+B,OAAlB;AAA2BE,IAAAA,OAAO,EAAEnB,YAAY,CAACiB;AAAjD;AADmB,CAAD,CAA5B;AAIA,OAAO,MAAMG,QAAQ,GAAGlC,SAAS,CAACmC,OAA3B;AACP,OAAO,MAAMC,aAAa,GAAGtB,YAAY,CAACqB,OAAnC;AACP,eAAeL,KAAf","sourcesContent":["import { createSlice, configureStore } from \"@reduxjs/toolkit\";\r\n\r\nconst cartSlice = createSlice({\r\n\tname: \"cart\",\r\n\tinitialState: { isActive: false, notification: null },\r\n\treducers: {\r\n\t\ttoggleCart(state) {\r\n\t\t\tstate.isActive = !state.isActive;\r\n\t\t},\r\n\t\tshowNotification(state, action) {\r\n\t\t\tstate.notification = {\r\n\t\t\t\tstatus: action.payload.status,\r\n\t\t\t\ttitle: action.payload.title,\r\n\t\t\t\tmessage: action.payload.message,\r\n\t\t\t};\r\n\t\t},\r\n\t},\r\n});\r\n\r\nconst productSlice = createSlice({\r\n\tname: \"product\",\r\n\tinitialState: {\r\n\t\titems: [],\r\n\t\tquantity: 0,\r\n\t\ttotalPrice: 0,\r\n\t\tchanged: false,\r\n\t},\r\n\treducers: {\r\n\t\treplaceCart(state, action) {\r\n\t\t\tstate.quantity = action.payload.quantity;\r\n\t\t\tstate.items = action.payload.items;\r\n\t\t},\r\n\r\n\t\taddItem(state, action) {\r\n\t\t\tconst newItem = action.payload;\r\n\t\t\tconst existingItem = state.items.find((item) => item.id === newItem.id);\r\n\t\t\tstate.quantity++;\r\n\t\t\tstate.changed = true;\r\n\t\t\tif (!existingItem) {\r\n\t\t\t\tstate.items.push({\r\n\t\t\t\t\tid: newItem.id,\r\n\t\t\t\t\tprice: newItem.price,\r\n\t\t\t\t\tquantity: 1,\r\n\t\t\t\t\ttotalPrice: newItem.price,\r\n\t\t\t\t\tname: newItem.title,\r\n\t\t\t\t});\r\n\t\t\t} else {\r\n\t\t\t\texistingItem.quantity++;\r\n\t\t\t\texistingItem.totalPrice = existingItem.totalPrice + newItem.price;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tremoveItem(state, action) {\r\n\t\t\tconst id = action.payload;\r\n\t\t\tconst existingItem = state.items.find((item) => item.id === id);\r\n\t\t\tstate.quantity--;\r\n\t\t\tif (existingItem.quantity === 1) {\r\n\t\t\t\tstate.items = state.items.filter((item) => item.id !== id);\r\n\t\t\t} else {\r\n\t\t\t\texistingItem.quantity--;\r\n\t\t\t\texistingItem.totalPrice = existingItem.totalPrice - existingItem.price;\r\n\t\t\t}\r\n\t\t},\r\n\t},\r\n});\r\n\r\nconst store = configureStore({\r\n\treducer: { cart: cartSlice.reducer, product: productSlice.reducer },\r\n});\r\n\r\nexport const showCart = cartSlice.actions;\r\nexport const modifyProduct = productSlice.actions;\r\nexport default store;\r\n"]},"metadata":{},"sourceType":"module"}
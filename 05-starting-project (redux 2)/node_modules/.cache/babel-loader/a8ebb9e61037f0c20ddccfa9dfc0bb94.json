{"ast":null,"code":"import { createSlice, configureStore } from \"@reduxjs/toolkit\";\nconst cartSlice = createSlice({\n  name: \"cart\",\n  initialState: {\n    isActive: false\n  },\n  reducers: {\n    toggleCart(state) {\n      state.isActive = !state.isActive;\n    }\n\n  }\n});\nconst productSlice = createSlice({\n  name: \"product\",\n  initialState: {\n    items: [],\n    quantity: 0,\n    totalPrice: 0\n  },\n  reducers: {\n    addItem(state, action) {\n      const newItem = action.payload;\n      const existingItem = state.items.find(item => item.id === newItem.id);\n      state.quantity++;\n\n      if (!existingItem) {\n        state.items.push({\n          itemId: newItem.id,\n          price: newItem.price,\n          quantity: 1,\n          totalPrice: newItem.price,\n          name: newItem.title\n        });\n      } else {\n        existingItem.quantity++;\n        existingItem.totalPrice = existingItem.totalPrice + newItem.price;\n      }\n    },\n\n    removeItem(state, action) {\n      const id = action.payload;\n      const existingItem = state.items.find(item => item.id === id);\n      state.quantity--;\n\n      if (existingItem.quantity === 1) {\n        state.items = state.items.filter(item => item.id !== id);\n      } else {\n        existingItem.quantity--;\n        existingItem.totalPrice = existingItem.totalPrice - existingItem.price;\n      }\n    },\n\n    addOne(state) {\n      state.quantity++;\n    },\n\n    minusOne(state) {\n      if (state.quantity === 0) return;\n      state.quantity--;\n    }\n\n  }\n});\nconst store = configureStore({\n  reducer: {\n    cart: cartSlice.reducer,\n    product: productSlice.reducer\n  }\n});\nexport const showCart = cartSlice.actions;\nexport const modifyProduct = productSlice.actions;\nexport default store;","map":{"version":3,"sources":["C:/Users/bobso/Desktop/React Projects/05-starting-project (redux 2)/src/store/index.js"],"names":["createSlice","configureStore","cartSlice","name","initialState","isActive","reducers","toggleCart","state","productSlice","items","quantity","totalPrice","addItem","action","newItem","payload","existingItem","find","item","id","push","itemId","price","title","removeItem","filter","addOne","minusOne","store","reducer","cart","product","showCart","actions","modifyProduct"],"mappings":"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","sourcesContent":["import { createSlice, configureStore } from \"@reduxjs/toolkit\";\r\n\r\nconst cartSlice = createSlice({\r\n\tname: \"cart\",\r\n\tinitialState: { isActive: false },\r\n\treducers: {\r\n\t\ttoggleCart(state) {\r\n\t\t\tstate.isActive = !state.isActive;\r\n\t\t},\r\n\t},\r\n});\r\n\r\nconst productSlice = createSlice({\r\n\tname: \"product\",\r\n\tinitialState: {\r\n\t\titems: [],\r\n\t\tquantity: 0,\r\n\t\ttotalPrice: 0,\r\n\t},\r\n\treducers: {\r\n\t\taddItem(state, action) {\r\n\t\t\tconst newItem = action.payload;\r\n\t\t\tconst existingItem = state.items.find((item) => item.id === newItem.id);\r\n\t\t\tstate.quantity++;\r\n\t\t\tif (!existingItem) {\r\n\t\t\t\tstate.items.push({\r\n\t\t\t\t\titemId: newItem.id,\r\n\t\t\t\t\tprice: newItem.price,\r\n\t\t\t\t\tquantity: 1,\r\n\t\t\t\t\ttotalPrice: newItem.price,\r\n\t\t\t\t\tname: newItem.title,\r\n\t\t\t\t});\r\n\t\t\t} else {\r\n\t\t\t\texistingItem.quantity++;\r\n\t\t\t\texistingItem.totalPrice = existingItem.totalPrice + newItem.price;\r\n\t\t\t}\r\n\t\t},\r\n\t\tremoveItem(state, action) {\r\n\t\t\tconst id = action.payload;\r\n\t\t\tconst existingItem = state.items.find((item) => item.id === id);\r\n\t\t\tstate.quantity--;\r\n\t\t\tif (existingItem.quantity === 1) {\r\n\t\t\t\tstate.items = state.items.filter((item) => item.id !== id);\r\n\t\t\t} else {\r\n\t\t\t\texistingItem.quantity--;\r\n\t\t\t\texistingItem.totalPrice = existingItem.totalPrice - existingItem.price;\r\n\t\t\t}\r\n\t\t},\r\n\t\taddOne(state) {\r\n\t\t\tstate.quantity++;\r\n\t\t},\r\n\t\tminusOne(state) {\r\n\t\t\tif (state.quantity === 0) return;\r\n\t\t\tstate.quantity--;\r\n\t\t},\r\n\t},\r\n});\r\n\r\nconst store = configureStore({\r\n\treducer: { cart: cartSlice.reducer, product: productSlice.reducer },\r\n});\r\n\r\nexport const showCart = cartSlice.actions;\r\nexport const modifyProduct = productSlice.actions;\r\nexport default store;\r\n"]},"metadata":{},"sourceType":"module"}
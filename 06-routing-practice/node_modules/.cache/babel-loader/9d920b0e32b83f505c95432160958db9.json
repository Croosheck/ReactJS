{"ast":null,"code":"const FIREBASE_DOMAIN = \"https://quotes-b2664-default-rtdb.firebaseio.com\";\nexport async function getAllQuotes() {\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes.json`);\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || \"Could not fetch quotes.\");\n  }\n\n  const transformedQuotes = [];\n\n  for (const key in data) {\n    const quoteObj = {\n      id: key,\n      ...data[key]\n    };\n    transformedQuotes.push(quoteObj);\n  }\n\n  return transformedQuotes;\n}\nexport async function getSingleQuote(quoteId) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes/${quoteId}.json`);\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || \"Could not fetch quote.\");\n  }\n\n  const loadedQuote = {\n    id: quoteId,\n    ...data\n  };\n  return loadedQuote;\n}\nexport async function addQuote(quoteData) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes.json`, {\n    method: \"POST\",\n    body: JSON.stringify(quoteData),\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  });\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || \"Could not create quote.\");\n  }\n\n  return null;\n}\nexport async function addComment(requestData) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/comments/${requestData.quoteId}.json`, {\n    method: \"POST\",\n    body: JSON.stringify(requestData.commentData),\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  });\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || \"Could not add comment.\");\n  }\n\n  return {\n    commentId: data.name\n  };\n}\nexport async function getAllComments(quoteId) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/comments/${quoteId}.json`);\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || \"Could not get comments.\");\n  }\n\n  const transformedComments = [];\n\n  for (const key in data) {\n    const commentObj = {\n      id: key,\n      ...data[key]\n    };\n    transformedComments.push(commentObj);\n  }\n\n  return transformedComments;\n}","map":{"version":3,"sources":["C:/Users/bobso/Desktop/06-rotuing-practice/src/lib/api.js"],"names":["FIREBASE_DOMAIN","getAllQuotes","response","fetch","data","json","ok","Error","message","transformedQuotes","key","quoteObj","id","push","getSingleQuote","quoteId","loadedQuote","addQuote","quoteData","method","body","JSON","stringify","headers","addComment","requestData","commentData","commentId","name","getAllComments","transformedComments","commentObj"],"mappings":"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","sourcesContent":["const FIREBASE_DOMAIN = \"https://quotes-b2664-default-rtdb.firebaseio.com\";\n\nexport async function getAllQuotes() {\n\tconst response = await fetch(`${FIREBASE_DOMAIN}/quotes.json`);\n\tconst data = await response.json();\n\n\tif (!response.ok) {\n\t\tthrow new Error(data.message || \"Could not fetch quotes.\");\n\t}\n\n\tconst transformedQuotes = [];\n\n\tfor (const key in data) {\n\t\tconst quoteObj = {\n\t\t\tid: key,\n\t\t\t...data[key],\n\t\t};\n\n\t\ttransformedQuotes.push(quoteObj);\n\t}\n\n\treturn transformedQuotes;\n}\n\nexport async function getSingleQuote(quoteId) {\n\tconst response = await fetch(`${FIREBASE_DOMAIN}/quotes/${quoteId}.json`);\n\tconst data = await response.json();\n\n\tif (!response.ok) {\n\t\tthrow new Error(data.message || \"Could not fetch quote.\");\n\t}\n\n\tconst loadedQuote = {\n\t\tid: quoteId,\n\t\t...data,\n\t};\n\n\treturn loadedQuote;\n}\n\nexport async function addQuote(quoteData) {\n\tconst response = await fetch(`${FIREBASE_DOMAIN}/quotes.json`, {\n\t\tmethod: \"POST\",\n\t\tbody: JSON.stringify(quoteData),\n\t\theaders: {\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t},\n\t});\n\tconst data = await response.json();\n\n\tif (!response.ok) {\n\t\tthrow new Error(data.message || \"Could not create quote.\");\n\t}\n\n\treturn null;\n}\n\nexport async function addComment(requestData) {\n\tconst response = await fetch(\n\t\t`${FIREBASE_DOMAIN}/comments/${requestData.quoteId}.json`,\n\t\t{\n\t\t\tmethod: \"POST\",\n\t\t\tbody: JSON.stringify(requestData.commentData),\n\t\t\theaders: {\n\t\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t},\n\t\t}\n\t);\n\tconst data = await response.json();\n\n\tif (!response.ok) {\n\t\tthrow new Error(data.message || \"Could not add comment.\");\n\t}\n\n\treturn { commentId: data.name };\n}\n\nexport async function getAllComments(quoteId) {\n\tconst response = await fetch(`${FIREBASE_DOMAIN}/comments/${quoteId}.json`);\n\n\tconst data = await response.json();\n\n\tif (!response.ok) {\n\t\tthrow new Error(data.message || \"Could not get comments.\");\n\t}\n\n\tconst transformedComments = [];\n\n\tfor (const key in data) {\n\t\tconst commentObj = {\n\t\t\tid: key,\n\t\t\t...data[key],\n\t\t};\n\n\t\ttransformedComments.push(commentObj);\n\t}\n\n\treturn transformedComments;\n}\n"]},"metadata":{},"sourceType":"module"}